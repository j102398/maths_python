class ThreeMatrix:
  def __init__(self,rows):
      self.a = rows[0][0]
      self.b = rows[0][1]
      self.c = rows[0][2]
      self.d = rows[1][0]
      self.e = rows[1][1]
      self.f = rows[1][2]
      self.g = rows[2][0]
      self.h = rows[2][1]
      self.i = rows[2][2]

  def matrix_minors(self):
      minor_a = (self.e * self.i) - (self.f * self.h)
      minor_b = (self.d * self.i) - (self.f * self.g)
      minor_c = (self.d * self.h) - (self.e * self.g)
      minor_d = (self.b * self.i) - (self.c * self.h)
      minor_e = (self.a * self.i) - (self.c * self.g)
      minor_f = (self.a * self.h) - (self.b * self.g)
      minor_g = (self.b * self.f) - (self.c * self.e)
      minor_h = (self.a * self.f) - (self.c * self.d)
      minor_i = (self.a * self.e) - (self.b * self.d)

      minor_matrix = [
          [minor_a, minor_b, minor_c],
          [minor_d, minor_e, minor_f],
          [minor_g, minor_h, minor_i]
      ]


      return minor_matrix

  def display_matrix_minors(self):
      matrix_minors = self.matrix_minors()
      matrix_minors_formatted = (f'''
      [{round(matrix_minors[0][0],5)}   {round(matrix_minors[0][1],5)}  {round(matrix_minors[0][2],5)}]
      [{round(matrix_minors[1][0],5)}   {round(matrix_minors[1][1],5)}  {round(matrix_minors[1][2],5)}]
      [{round(matrix_minors[2][0],5)}   {round(matrix_minors[2][1],5)}  {round(matrix_minors[2][2],5)}]''')

      return f"Matrix of minors: {matrix_minors_formatted}"

  def determinant(self):
      minor_matrix = self.matrix_minors()
      determinant = (self.a * minor_matrix[0][0]) - (self.b * minor_matrix[0][1]) + (self.c * minor_matrix[0][2])
      return determinant

  def display_determinant(self):
      determinant = self.determinant()
      return f"Determinant : {determinant}"


  def matrix_cofactors(self):
      matrix_minors = self.matrix_minors()
      cofactors_a = matrix_minors[0][0]
      cofactors_b = -(matrix_minors[0][1])
      cofactors_c = matrix_minors[0][2]
      cofactors_d = -(matrix_minors[1][0])
      cofactors_e = matrix_minors[1][1]
      cofactors_f = -(matrix_minors[1][2])
      cofactors_g = matrix_minors[2][0]
      cofactors_h = -(matrix_minors[2][1])
      cofactors_i = matrix_minors[2][2]

      matrix_cofactors = ([
          [cofactors_a,cofactors_b,cofactors_c],
          [cofactors_d,cofactors_e,cofactors_f],
          [cofactors_g,cofactors_h,cofactors_i]
      ])
      return matrix_cofactors

  def display_matrix_cofactors(self):
      matrix_cofactors = self.matrix_cofactors()
      matrix_cofactors_formatted = (f'''
      [{round(matrix_cofactors[0][0],3)}   {round(matrix_cofactors[0][1],3)}  {round(matrix_cofactors[0][2],3)}]
      [{round(matrix_cofactors[1][0],3)}   {round(matrix_cofactors[1][1],3)}  {round(matrix_cofactors[1][2],3)}]
      [{round(matrix_cofactors[2][0],3)}   {round(matrix_cofactors[2][1],3)}  {round(matrix_cofactors[2][2],3)}]''')

      return f"Matrix of Cofactors: {matrix_cofactors_formatted}"

  def matrix_transposed(self):
      matrix_cofactors = self.matrix_cofactors()
      transposed_a = matrix_cofactors[0][0]
      transposed_b = matrix_cofactors[1][0]
      transposed_c = matrix_cofactors[2][0]
      transposed_d = matrix_cofactors[0][1]
      transposed_e = matrix_cofactors[1][1]
      transposed_f = matrix_cofactors[2][1]
      transposed_g = matrix_cofactors[0][2]
      transposed_h = matrix_cofactors[1][2]
      transposed_i = matrix_cofactors[2][2]

      matrix_transposed = ([
          [transposed_a,transposed_b,transposed_c],
          [transposed_d,transposed_e,transposed_f],
          [transposed_g,transposed_h,transposed_i]
      ])
      return matrix_transposed

  def display_matrix_transposed(self):
      matrix_transposed = self.matrix_transposed()
      matrix_transposed_formatted = (f'''
            [{matrix_transposed[0][0]}   {matrix_transposed[0][1]}  {matrix_transposed[0][2]}]
            [{matrix_transposed[1][0]}   {matrix_transposed[1][1]}  {matrix_transposed[1][2]}]
            [{matrix_transposed[2][0]}   {matrix_transposed[2][1]}  {matrix_transposed[2][2]}]''')

      return f"Matrix Transposed: {matrix_transposed_formatted}"

  def inverse_matrix(self):
      matrix_transposed = self.matrix_transposed()
      determinant = self.determinant()
      if determinant == 0:
          return f"As determinant is 0, matrix cannot be inversed"
      else:
          inverse_matrix_a = matrix_transposed[0][0] / determinant
          inverse_matrix_b = matrix_transposed[0][1] / determinant
          inverse_matrix_c = matrix_transposed[0][2] / determinant
          inverse_matrix_d = matrix_transposed[1][0] / determinant
          inverse_matrix_e = matrix_transposed[1][1] / determinant
          inverse_matrix_f = matrix_transposed[1][2] / determinant
          inverse_matrix_g = matrix_transposed[2][0] / determinant
          inverse_matrix_h = matrix_transposed[2][1] / determinant
          inverse_matrix_i = matrix_transposed[2][2] / determinant

          inverse_matrix = ([
              [inverse_matrix_a, inverse_matrix_b, inverse_matrix_c],
              [inverse_matrix_d, inverse_matrix_e, inverse_matrix_f],
              [inverse_matrix_g, inverse_matrix_h, inverse_matrix_i]
          ])
          return inverse_matrix

  def display_inverse_matrix(self):
      inverse_matrix = self.inverse_matrix()
      inverse_matrix_formatted = (f'''
      [{round(inverse_matrix[0][0], 3)}   {round(inverse_matrix[0][1], 3)}  {round(inverse_matrix[0][2], 3)}]
    [{round(inverse_matrix[1][0], 3)}   {round(inverse_matrix[1][1], 3)}  {round(inverse_matrix[1][2], 3)}]
    [{round(inverse_matrix[2][0], 3)}   {round(inverse_matrix[2][1], 3)}  {round(inverse_matrix[2][2], 3)}]''')

      return f"Inverse matrix:{inverse_matrix_formatted}"

class TwoMatrix:
    def __init__(self,rows):
        self.a = rows[0][0]
        self.b = rows[0][1]
        self.c = rows[1][0]
        self.d = rows[1][1]

    def determinant(self):
        return (self.a * self.d) - (self.b * self.c)

    def inverse_matrix(self):
        if self.determinant() == 0:
            return "Matrix cannot be inverted as determinant is 0"
        else:
            new_a = self.d / self.determinant()
            new_b = (-1 * self.b) / self.determinant()
            new_c = (-1 * self.c) / self.determinant()
            new_d = self.a / self.determinant()
            # assemble the inverse matrix
            new_matrix = (
                [new_a, new_b],
                [new_c, new_d])
            return new_matrix


def simultaneous_equation_2_variables(equation_1,equation_2):
    #in the form x + y = k
    x1 = equation_1[0]
    y1 = equation_1[1]
    k1 = equation_1[2]
    x2 = equation_2[0]
    y2 = equation_2[1]
    k2 = equation_2[2]

    #Form a matrix for the lhs

    lhs_matrix = TwoMatrix([
        [x1,y1],
        [x2,y2]
    ])
    inverse_matrix = lhs_matrix.inverse_matrix()

    #Multiply both sides by the inverse matrix to solve

    x = (inverse_matrix[0][0] * k1) + (inverse_matrix[0][1] * k2)
    y = (inverse_matrix[1][0] * k1) + (inverse_matrix[1][1] * k2)

    return x,y

def simultaneous_equation_3_variables(equation_1, equation_2, equation_3):
        # assign variables so we can later on make a matrix
        x1 = equation_1[0]
        y1 = equation_1[1]
        z1 = equation_1[2]
        k1 = equation_1[3]
        x2 = equation_2[0]
        y2 = equation_2[1]
        z2 = equation_2[2]
        k2 = equation_2[3]
        x3 = equation_3[0]
        y3 = equation_3[1]
        z3 = equation_3[2]
        k3 = equation_3[3]

        #Create a matrix for the lhs
        lhs_matrix = ThreeMatrix([
            [x1,y1,z1],
            [x2,y2,z2],
            [x3,y3,z3]
        ])
        inverse_matrix = lhs_matrix.inverse_matrix()

        #Multiply both sides by the inverse matrix to solve
        x = (inverse_matrix[0][0] * k1) + (inverse_matrix[0][1] * k2) + (inverse_matrix[0][2] * k3)
        y = (inverse_matrix[1][0] * k1) + (inverse_matrix[1][1] * k2) + (inverse_matrix[1][2] * k3)
        z = (inverse_matrix[2][0] * k1) + (inverse_matrix[2][1] * k2) + (inverse_matrix[2][2] * k3)

        return x,y,z

def normal_vector(direction_vector_1,direction_vector_2):
    #We are going to use the cross product to determine the normal vector
    #The matrix determinant method
    i_1,j_1,k_1 = direction_vector_1
    i_2,j_2,k_2 = direction_vector_2

    # Compute components of the normal vector using cross product formula
    normal_i = (j_1 * k_2) - (k_1 * j_2)
    normal_j = -(i_1 * k_2 - k_1 * i_2)
    normal_k = (i_1 * j_2) - (j_1 * i_2)

    # Return the normal vector


    return f"Normal vector is {normal_i}i + {normal_j}j + {normal_k}k"



### matrix example
matrix = ([
  [1,2,3],
  [1,5,6],
  [7,8,9]
])

matrix = ThreeMatrix(matrix)

print(matrix.display_matrix_minors())
print("")
print(matrix.display_determinant())
print("")
print(matrix.display_matrix_cofactors())
print("")
print(matrix.display_matrix_transposed())
print("")
print(matrix.display_inverse_matrix())







#vector example
print("\n\n\n\n")
vector_1 = [3,-1,2]
vector_2 = [1,4,0]
print(normal_vector(vector_1,vector_2))

c = simultaneous_equation_3_variables([1,0,0,1],[0,1,0,2],[0,0,1,3])
print(c)

d = simultaneous_equation_2_variables([1,0,1],[0,1,2])
print(d)
