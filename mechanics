# Miscellaneous
def factorial(number):
    if number == 0:
        return 1
    else:
        total = 1
        for i in range(number, 0, -1):
            total *= i

        return total

e = 2.718281828459045
pi = 3.141592653589793
def radians(degrees):
    radians = degrees * (pi / 180)
    return radians
def sin(x):
    approx_value = x
    iteration_counter = 0
    for r in range(3, 50, 2):
        iteration_counter += 1
        if iteration_counter % 2 == 0:
            approx_value += ((x ** (r)) / (factorial(r)))
        else:
            approx_value -= ((x ** (r)) / (factorial(r)))

    return approx_value

def degrees(radians):
    degrees = radians * (180/pi)
    return degrees
def cos(x):
        approx_value = 1
        iteration_counter = 0
        for r in range(2, 50, 2):
            iteration_counter += 1
            if iteration_counter % 2 == 0:
                approx_value += ((x ** (r)) / (factorial(r)))
            else:
                approx_value -= ((x ** (r)) / (factorial(r)))

        return approx_value

def arctan(x, num_terms=10):
    """
    Approximates arctan(x) using a Taylor series expansion.

    :param x: input value
    :param num_terms: number of terms to use in the Taylor series (default: 10)
    :return: approximate value of arctan(x)
    """
    result = 0
    for i in range(num_terms):
        sign = (-1) ** i
        result += ((x ** (2 * i + 1)) / (2 * i + 1)) * sign
    return result

class EC2D:     #Elastic Collisions in 2d
    def __init__(self,angle_of_approach,coefficient_of_restitution,speed_of_approach):
        self.angle_of_approach = angle_of_approach
        self.e = coefficient_of_restitution
        self.u = speed_of_approach #u is initial velocity



    def horizontal_components(self):
        horizontal = self.u * cos(radians(self.angle_of_approach))
        return horizontal
    def vertical_components(self):
        vertical = self.u * sin(radians(self.angle_of_approach)) * self.e
        return vertical
    def speed_of_rebound(self):
        speed = ((self.horizontal_components()**2)+(self.vertical_components()**2))**0.5
        return speed

    def angle_of_deflection(self):
        angle_2 = arctan(self.vertical_components()/self.horizontal_components()) # this is given in radians
        angle_of_deflection = degrees(angle_2) + self.angle_of_approach
        return angle_of_deflection

class Elastic:
    def __init__(self,modulus_of_elasticity,extension,natural_length):
        self.modulus_of_elasticity = modulus_of_elasticity
        self.extension = extension
        self.natural_length = natural_length

    def tension(self):
        tension = (self.modulus_of_elasticity * self.extension) / self.natural_length
        return tension

    def epe(self):
        epe = ((self.modulus_of_elasticity) * (self.extension**2)) / (2 * self.natural_length) #epe measured in Joules
        return epe

class EC1D:
    def __init__(self,initial_velocity,coefficient_of_restitution,mass):
        self.inital_velocity = initial_velocity
        self.coefficient_of_restitution = coefficient_of_restitution
        self.mass = mass
    

ex1 = EC2D(36.86989765,1/3,1)
print(ex1.speed_of_rebound()
print(ex1.angle_of_deflection())

a = Elastic(6,0.2,1.4)
print(a.epe())
