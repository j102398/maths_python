#mathematical functions
def ncr(n,r):
    ncr = ((factorial(n)) / (factorial(r) * factorial(n-r)))
    return ncr




def magnitude(number): #returns |number|
    if number < 0:
        number *= -1
    else:
        pass
    return number

def SieveOfEratosthenes(n):  #used for generating a list of prime numbers up to n
    # Create a list to store boolean values representing whether each number is prime or not
    prime_numbers = [True for i in range(n + 1)]

    # Mark 0 and 1 as not prime numbers, as they are not
    prime_numbers[0] = prime_numbers[1] = False

    # Create an empty list to store the prime numbers
    prime_numbers_list = []

    # Start looping from 2, the first prime number
    p = 2
    while p <= (n ** 0.5):
        # If the current number is marked as prime
        if prime_numbers[p] == True:
            # Add it to the list of prime numbers
            prime_numbers_list.append(p)
            # Mark all multiples of p as not prime
            # Start from p * p, because all smaller multiples would have already been marked by smaller prime numbers
            # For example, if p is 5, we start from 25, because all smaller multiples like 10, 15, 20 would have been marked by 2, 3, etc.
            for i in range(p * p, n + 1, p):
                # Mark i as not prime
                prime_numbers[i] = False
        # Move on to the next number
        p += 1

    # Loop through the remaining numbers to find any additional prime numbers
    for p in range(int(n ** 0.5) + 1, n + 1):
        # If the current number is still marked as prime
        if prime_numbers[p]:
            # Add it to the list of prime numbers
            prime_numbers_list.append(p)

    # Return the list of prime numbers
    return prime_numbers_list

#Mathematical functions needed for the Binomial expansion
def factorial(number):
    if number == 0:
        return 1
    else:
        total = 1
        for i in range(number, 0, -1):
            total *= i

        return total



#functions for formatting
def superscript(n):
    n = str(n)
    formatted_number = ""
    for digit in n:
        if digit == '0':
            formatted_number += '⁰'
        if digit == '1':
            formatted_number += '¹'
        if digit == '2':
            formatted_number += '²'
        if digit == '3':
            formatted_number += '³'
        if digit == '4':
            formatted_number += '⁴'
        if digit == '5':
            formatted_number += '⁵'
        if digit == '6':
            formatted_number += '⁶'
        if digit == '7':
            formatted_number += '⁷'
        if digit == '8':
            formatted_number += '⁸'
        if digit == '9':
            formatted_number += '⁹'
    return formatted_number






class BinomialExpansion:
    def __init__(self, variable_coefficient,variable, variable_exponent, constant, exponent):
        self.variable = variable
        self.variable_coefficient = float(variable_coefficient)
        self.variable_exponent = variable_exponent
        self.constant = float(constant)
        self.exponent = int(exponent)

    def coefficient_expansion(self):
        coefficient_list = []
        for k in range(self.exponent + 1):
            coefficient = ncr(self.exponent, k) * (self.variable_coefficient ** (self.exponent - k)) * (
                        self.constant ** k)
            coefficient_list.append(coefficient)
        return coefficient_list

    def formatted_expansion(self):
        coefficient_list = self.coefficient_expansion()

        output = "" # what will be outputted
        for index in range(0,len(coefficient_list)):
            exponent = self.variable_exponent * (self.exponent - index)
            coefficient = coefficient_list[index]
            if coefficient > 0:
                sign  = " +"
                if int(coefficient) -coefficient == 0:  #if an integer, remove the .0 for formatting purposes
                    coefficient = int(coefficient)
                    #if it is a term with x in and has a 1 coefficient, remove the 1 as not neccessary
                    if coefficient == 1 and index != (len(coefficient_list)-1):
                         coefficient = ""

            else:
                sign = " -"
                if int(coefficient) -coefficient == 0: #if an integer, remove the .0 for formatting purposes
                    coefficient = int(coefficient)
                    # if it is a term with x in and has a -1 coefficient, remove the 1 as not neccessary
                    if coefficient == -1 and index != (len(coefficient_list)-1):
                        coefficient = ""

            if index == 0 and sign == " +": #if first term is positive, remove the sign as not needed
                current_term = f"{coefficient}{self.variable}{superscript(exponent)}"

            elif index == (len(coefficient_list)-2): #if x^1 term, remove exponent as not necessary
                current_term = f"{sign}{coefficient}{self.variable}"


            elif index == (len(coefficient_list)-1): #if the last term, it is a constant so remove the variable
                current_term = f"{sign}{coefficient}"

            else:
                current_term = f"{sign}{coefficient}{self.variable}{superscript(exponent)}"
            output += current_term #add the current term to the output
        return output










#arithmetic sequence in the form un = a + (n-1)D
#WHERE a is the first term, n is the term number and d is the linear difference between terms


class ArithmeticSequence:
    def __init__(self,a,d):
        self.a = a
        self.d = d

    def term(self,n):
        term = self.a + ((n-1)*self.d)
        return term

#Arithmetic series

class ArithmeticSeries:
    def __init__(self,a,d):
        self.a = a
        self.d = d

    def sum(self,n):
        #summing up to n
        summation = (0.5 * n) * ((2*self.a) + ((n-1)*d))
        return summation

#geometric sequence in the form un = a * r^(n-1)

class GeometricSequence:
    def __init__(self,a,r):
        self.a = a
        self.r = r

    def term(self,n):
        term = (self.a) * ((self.r)**(n-1))
        return term

#Geometric series and summing to infinity where applicable

class GeometricSeries:
    def __init__(self,a,r):
        self.a = a
        self.r = r

    def sum(self,n):
        sum = (self.a*(1-(self.r**(n)))) / (1-self.r)
        return sum

    def infinitysum(self):
        #can only sum to infinity if |r| < 1
        if magnitude(self.r) < 1:
            sum = self.a / (1-self.r)
            return sum
        else:
            return "|r| >= 1,cannot sum to infinity"


