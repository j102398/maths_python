#Miscellaneous
def factorial(number):
    if number == 0:
        return 1
    else:
        total = 1
        for i in range(number, 0, -1):
            total *= i

        return total

def ncr(n,r):
    ncr = ((factorial(n)) / (factorial(r) * factorial(n-r)))
    return ncr
##Constants
e = 2.718281828459045
pi  = 3.141592653589793

def magnitude(number):
    if number < 0:
        number *= -1
        return number
    else:
        return number



#Binomial distribution
class Binomial: # X ~ B(n,p)
    def __init__(self,n,p):

        self.n = n  # number of trials
        self.p = p   #probnability of success per trial

    def mean(self):
        mean = self.n * self.p
        return mean
    def variance(self):
        variance = (self.n*self.p)*(1-self.p)
        return variance

    def bpd(self,x):  #P(X=x)
        probability = (ncr(self.n,x)) * (self.p ** x) * ((1-self.p) ** (self.n-x))
        return probability

    def bcd(self,lower_x,upper_x):
        probability = 0
        for x in range(lower_x,upper_x + 1): #loop between lower x value and upper x value
            probability += self.bpd(x)
        return probability

    def invb(self,area): #area should be a p value
        #will find out p(x≤k) = area

        probability_list = []
        for k in range(0,self.n+1):
            probability_list.append(self.bcd(0,k))

        #Find out list of differences between p and desired p
        difference_list = []
        for probability in probability_list:
            difference_list.append(magnitude(area - probability))
        smallest_difference = min(difference_list)
        print(difference_list)
        return difference_list.index(smallest_difference)





#poisson distribution
class Poisson: # X ~ Po(λ)
    def __init__(self,lambda_value):
        self.lambda_value = lambda_value
    def mean(self):
        return self.lambda_value
    def variance(self):
        return self.lambda_value

    def ppd(self,x): # P(X=x)
        probability = (e**(-self.lambda_value)) * ((self.lambda_value ** x) / factorial(x))
        return probability

    def pcd(self,lower_x,upper_x):
        probability = 0
        for x in range(lower_x,upper_x + 1): #loop between lower x value and upper x value
            probability += self.ppd(x)
        return probability

    def invp(self,area): #area should be a p value

        #find out p(x≤k) = area

        probability_list = []

        #assuming testing 100 values above the mean will be good  enough (unlike the binomial, there are not a fixed n of trials)
        upper_bound = self.mean() + 101
        for k in range(0,upper_bound):
            probability_list.append(self.pcd(0,k))

        #Find out list of differences between p and desired p
        difference_list = []
        for probability in probability_list:
            difference_list.append(magnitude(area - probability))
        smallest_difference = min(difference_list)
        return difference_list.index(smallest_difference),self.pcd(0,difference_list.index(smallest_difference))


#geometric distribution
class Geometric: # X ~ Geo(p)
    def __init__(self,p):

        self.p = p

    def mean(self):
        mean = 1 / self.p
        return mean
    def variance(self):
        variance = (1-self.p) / (self.p ** 2)
        return variance

    def gpd(self, x):
        if x == 0:
            probability = 0
        else:
            probability = self.p * ((1 - self.p) ** (x - 1))

        return probability

    def gcd(self, lower_x, upper_x):
        probability = 0
        for x in range(lower_x, upper_x + 1):  # loop between lower x value and upper x value
            probability += self.gpd(x)
        return probability

    def invg(self,area): #area should be a p value

        #find out p(x≤k) = area

        probability_list = []

        #assuming testing 100 values above the mean will be good  enough (unlike the binomial, there are not a fixed n of trials)
        upper_bound = round(self.mean() + 101) #round to make it an integer, as geometric dist only takes discrete values
        for k in range(0,upper_bound):
            probability_list.append(self.gcd(0,k))

        #Find out list of differences between p and desired p
        difference_list = []
        for probability in probability_list:
            difference_list.append(magnitude(area - probability))
        smallest_difference = min(difference_list)
        return difference_list.index(smallest_difference),self.gcd(0,difference_list.index(smallest_difference))

#negative binomial distribution
class NegativeBinomial: # X ~ NB(r,p)
    def __init__(self,r,p):
        self.r = r
        self.p = p

    def mean(self):
        mean = self.r / self.p
        return mean

    def variance(self):
        variance = ((self.r*(1-self.p)) / (self.p **2))
        return variance

    def nbpd(self, x):
        probability = (ncr((x - 1), (self.r - 1))) * (self.p ** self.r) * ((1 - self.p) ** (x - self.r))
        return probability

    def nbcd(self,lower_x,upper_x):
        probability = 0
        for x in range(lower_x, upper_x + 1):  # loop between lower x value and upper x value
            probability += self.nbpd(x)
        return probability

    def invnb(self,area): #area should be a p value

        #find out p(x≤k) = area

        probability_list = []

        #assuming testing 100 values above the mean will be good  enough (unlike the binomial, there are not a fixed n of trials)
        upper_bound = round(self.mean() + 101) #round to make it an integer, as geometric dist only takes discrete values
        for k in range(0,upper_bound):
            probability_list.append(self.nbcd(0,k))

        #Find out list of differences between p and desired p
        difference_list = []
        for probability in probability_list:
            difference_list.append(magnitude(area - probability))
        smallest_difference = min(difference_list)
        return difference_list.index(smallest_difference),self.nbcd(0,difference_list.index(smallest_difference))


